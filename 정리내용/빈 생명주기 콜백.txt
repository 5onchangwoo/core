빈 생명주기 콜백?
  : 데이터베이스 커넥션 풀이나, 네트워크 소켓처럼 애플리켕션 시작 시점에 필요한 연결을 미리 해두고,
  애플리케이션 종료 시점에 연결을 모두 종료 시점에 연결을 모두 종료하는 작업을 진행하려면, 객체의 초기화와 종료 작업이 필요하다.

  간단하게 외부 네트워크에 미리 연결하는 객체를 하나 생성한다고 가정.
  실제로 네트워크에 연결하는 것은 아니고, 단순히 문자만 출력하도록 했다.
  이 NetworkClient는 애플리케이션 시작 시점에 connect()를 호출해서 연결을 맺어두어야 하고,
  애플리케이션이 종료되면 disConnect()를 호출해서 연결을 끊어야 한다.

스프링 빈 라이프사이클
 : 객체 생성 -> 의존관계 주입
 스프링은 의존관계 주입 완료시 스프링 빈에게 콜백 메서드를 통해서 초기화 시점을 알려주는 다양한 기능을 제공
 또한 스프링 컨테이너가 종료되기 직전에 소멸 콜백을 줌

스프링 빈의 이벤트 라이프 사이클 (싱글톤)
 : 스프링 컨테이너 생성 -> 스프링 빈 생성 -> 의존관계 주입 -> 초기화 콜백 -> 사용(애플리케이션 동작) -> 소멸전 콜백 -> 스프링 종료

* 초기화 콜백: 빈이 생성되고, 빈의 의존관계 주입이 완료된 후 호출
* 소멸전 콜백: 빈이 소멸되기 직전에 호출

객체의 생성과 초기화를 분리하자.
 : 생성자 - 필수 정보(파라미터)를 받고, 메모리를 할당해서 객체를 생성.
   초기화 - 생성자에서 생성된 값을 활용해 외부 커넥션을 연결하는 등 무거운 동작을 수행.
 유지보수 관점에서 분리하는 것이 좋음. (단일 책임의 원칙)
 (초기화 작업이 내부 값들만 약간 변경하는 정도로 단순한 경우에는 생성자에서 한번에 다 처리하는 것이 더 나을수 있음)
 추가적으로 객체를 생성 뒤 외부 커넥션을 미뤄서 최초의 액션이 주어질때 커넥션이 이뤄지게 만들 수 있음.

스프링은 크게3가지의 방법으로 빈 생명주기 콜백을 지원함.
 1. 인터페이스(InitializingBean, DisposableBean)
 2. 설정 정보에 초기화 메서드, 종료 메서드 지정
 3. @PostConstruct, @PreDestory 애노테이션 지원

1. 인터페이스(초기화, 소멸 인터페이스)
  -사용 방법:
  클라이언트에 implements InitializingBean, DisposableBean를 상속해준다.
  두 인터페이스가 가지고 있는 afterPropertiesSet(), destroy()메서드에 초기화, 소멸시 사용할 메서드를 넣어준다.
  -단점:
    * 이 인터페이스는 스프링 전용 인터페이스, 해당 코드가 스프링 전용 인터페이스에 의존한다.
    * 초기화, 소멸 메서드의 이름을 변경할 수 없다.
    * 내가 코드를 고칠 수 없는 외부 라이브러리에 적용할 수 없다.

  - 위와 같은 단점 떄문에 최근에는 사용하지 않는 방법이다.

2. 빈 등록 초기화, 소멸 메서드
  - 사용 방법:
  설정 정보에 @Bean(initMethod = "init", destroyMethod = "close")와 같이 초기화, 소멸 메서드를 지정할 수 있다.
  (init, close는 내가 만든 메서드)

  - 특징:
   * 메서드 이름을 자유롭게 줄 수 있다.
   * 스프링 빈이 스프링 코드에 의존하지 않는다.
   * 코드가 아니라 설정 정보를 사용하기 때문에 코드를 고칠 수 없는 외부 라이브러리에도 초기화, 종룔 메서드를 적용가능

  - 종료 메서드 추론
   * @bean의 destroyMethod 속성에는 특별한 기능이 있음.
   * 라이브러리는 대부분 'close', 'shutdown' 이라는 이름의 종료 메서드를 사용.
   * @Bean의 destroyMethod는 기본값이 '(inferred)' (추론)으로 등록 되어있다.
   * 이 추론 기능은 'close', 'shutdown'라는 이름의 메서드를 자동으로 호출해준다. 이름 그대로 종료 메서드를 추론해서 호출해준다.
   * 따라서 직접 스프링 빈으로 등록하면 종료 메서드는 따로 적어주지 않아도 잘 동작한다.
   * 추론 기능을 사용하기 싫으면 'destroyMethod=""'처럼 빈 공백을 지정하면 된다.

3. 애노테이션 @PostConstruct, @PreDestory
  - 사용 방법:
    메서드에 @PostConstruct, @PreDestory를 붙여주면 끝

  - 특징
    * 최신 스프링에서 권장하는 방법.
    * 매우 편리함.
    * 패키지가 'javax.annotation.postConstruct' -> 스프링에 종속적인 기술이 아닌 JSR-250 자바 표준이다.
    따라서 스프링이 아닌 다른 컨테이너에서도 동작
    * 컴포넌트 스캔과 잘 어울림

  - 단점
    * 외부 라이브러리에는 적용하지 못함.
    * 따라서 외부 라이브러리를 초기화, 종료 해야 한다면 @Bean의 기능을 사용하자.

>>>정리
@PostConstruct, @PreDestory 애노테이션을 사용하자.
+ 외부라이브러리를 초기화, 종료해야 한다면 @Bean의 initMethod, destoryMethod를 사용하자.


