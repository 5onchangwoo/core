빈 스코프
 : 스프링 빈이 스프링 컨테이너의 시작과 함께 생성, 종료될때까지 유지하는데 이는 스프링 빈이 기본적으로 싱글톤 스코프로 생성되기 때문이다.
 스코프는 빈이 존재할 수 있는 범위를 뜻함.

-스프링이 지원하는 스코프
 * 싱글톤: 기본 스코프, 스프링 컨테이너의 시작과 종료까지 유지되는 가장 넓은 범위의 스코프. (생명주기가 가장 김, 컨테이너와 동일)
 * 프로토타입: 스프링 컨테이너는 프로토타입 빈의 생성과 의존관계 주입까지만 관여하고 더는 관리하지 않는 매우 짧은 범위의 스코프
 * 웹 관련 스코프:
   + request: 웹 요청이 들어오고 나갈때 까지 유지되는 스코프
   + session: 웹 세션이 생성되고 종료될 때까지 유지되는 스코프
   + application: 웹의 서블릿 컨텍스와 같은 범위로 유지되는 스코프

- 빈 스코프 지정 방법
 1) 컴포넌트 스캔 자동 등록
 @Component위에 @Scope("prototype")추가
 2) 수동 등록
 @Bean위에 @Scope("prototype") 추가


1) 프로토타입 스코프
 : 싱글톤 스코프의 빈을 조회하면 스프링 컨테이너는 항상 같은 인스턴스의 스프링 빈을 반환.
 반면에 프로토타입 스코프를 스프링컨테이너에 조회하면 스프링 컨테이너는 항상 새로운 인스턴스를 생성해서 반환.

 - 동작
 1. 프로토타입 스코프의 빈을 스프링 컨테이너에 요청
 2. 스프링 컨테이너는 이 시점에 프로토타입 빈을 생성, 필요한 의존관계 주입
 3. 스프링 컨테이너는 생성한 프로토타입 빈을 클라이언트에 반환
 4. 이후에 스프링 컨테이너에 같은 요청이 오면 항상 새로운 프로토타입 빈을 생성해서 반환.
 >>정리
 스프링 컨테이너는 프로토타입 빈을 생성하고, 의존관계 주입, 초기화까지만 처리한다는 것.
 빈을 관리할 책임은 프로토타입 빈을 받은 클라이언트에 있다. 그래서 @PreDestroy같은 종료 메서드가 호출되지 않는다.

 -특징
  * 스프링 컨테이너에 요청할 때 마다 새로 생성
  * 스프링 컨테이너는 프로토타입 빈의 생성과 의존관계 주입 그리고 초기화까지만 관여
  * 빈을 클라이언트가 직접 관리해야 한다.
  * 종료 메서드가 호출되지 않는다. 따라서 종료메서드 호출을 원하면 클라이언트가 직접 해야한다.

프로토타입 스코프 - 싱글톤 빈과 함계 사용시 문제점
 : 스프링 컨테이너에 프로토타입 스코프의 빈을 요청하면 항상 새로운 객체 인스턴스를 생성&반환
 하지만 싱글톤 빈과 함께 사용할 때는 의도한 대로 잘 동작하지 않으므로 주의해야 한다.

###################################
싱글톤 빈에서 프로토타입 빈 사용

clientBean은 싱글톤이므로, 보통 스프링 컨테이너 생성 시점에 함계 생성되고, 의존관계 주입도 발생한다.
1. clientBean은 의존관계 자동 주입을 사용한다. 주입 시점에 스프링 컨테이너에 프로토타입 빈을 요청한다.
2. 스프링 컨테이너는 프로토타입 빈을 생성해서 clientBean에 반환한다. 프로토타입 빈의 count필드 값은 0이다.
이제 clientBean은 프로토타입 빈을 내부 필드에 보관한다. (정확히는 참조값을 보관한다.)
클라이언트 A는 clientBean을 스프링 컨테이너에 요청해서 받는다. 싱글톤이므로 항상 같은 clientBean이 반환된다.
3. 클라이언트A는 clientBean.logic()을 호출한다.
4. clientBean은 prototypeBean의 addCount()를 호출해서 프로토타입 빈의 count를 증가한다. count값이 1이 된다.

클라이언트 B는 clientBean을 스프링 컨테이너에 요청해서 받는다. 싱글톤이므로 항상 같은 clientBean이 반환된다.
여기서 중요한 점은 clientBean이 내부에 가지고 있는 프로토타입 빈은 이미 과거에 주입이 끝난 빈이다.
주입 시점에 스프링 컨테이너에 요청해서 프로토타입 빈이 새로 생성 된 것이지, 사용할 때마다 새로 생성되는 것이 아니다.
5. 클라이언트 B는 clientBean.logic()을 호출한다.
6. clientBean은 prototypeBean의 addCount()를 호출해서 프로토타입 빈의 count를 증가한다. 원래 1이었으므로 2가 된다.

스프링은 일반적으로 싱글톤 빈을 사용 >> 싱글톤 빈이 프로토타입 빈을 사용하게 된다.
그런데 싱글톤 빈은 생성 시점에만 의존관계 주입을 받기 때문에,
프로톤타입 빈이 새로 생성되기는 하지만, 싱글톤 빈과 함계 계속 유지되는 것이 문제.

해결 방법:
프로토타입 스코프 - 싱글톤 빈과 함께 사용시 Provider로 문제 해결

>>스프링 컨테이너에 요청
 : 가장 간단한 방법, 싱글톤 빈이 프로토타입을 사용할 때마다 스프링 컨테이너에 새롭게 요청하는 것.
 해당 방법처럼 의존관계를 외부에서 주입(DI)받는게 아니라
 직접 필요한 의존관계를 찾는 것을 Dependency Lookup(DL) 의존관계 조회(탐색)이라고 한다.
 하지만 이렇게 스프링 애플리케이션 컨텍스트 전체를 주입받게 되면, 스프링 컨테이너에 종속적인 코드가 되고, 단위 테스트도 어려워짐.
 스프링은 DL기능을 하는 ObjectFactory, ObjectProvider가 있다.

###################################
ObjectFactory, ObjectProvider
 - ObjectFactory: 기능이 단순(getObject()만 지원)
 - ObjectProvider: ObjectFactory를 상속함. 옵션, 스트림 처리등 편의 기능이 많다
 두 객체 전부 라이브러리가 필요하지 않으며, 스프링에 의존

 -사용 방법
   1. private ObjectProvider<PrototypeBean> prototypeBeanProvider; 와 같이 객체 추가해줌
   2. 로직을 사용(DL이 필요할 때마다) prototypeBeanProvider.getObject();를 추가
   그러면 내부에서는 스프링 컨테이너를 통해 해당 빈을 찾아서 반환해준다.(DL)

  스프링이 제공하는 기능을 사용하지만 기능이 단순해 단위테스트를 만들거나 mock코드를 만들기는 훨씬 쉬워진다.
  ObjectProvider는 지금 딱 필요한 DL정도의 기능만 제공

##############################################################
JSR-330 Provider
 :javax.inject.Provider라는 JSR-330 자바 표준을 사용하는 방법.
 사용하기 위해선 javax.inject:javax.inject:1 라이브러리를 gradle에 추가해주어야 한다.
 -사용 방법:
   1. private Provider<PrototypeBean> prototypeBeanProvider; 와 같이 객체 추가해줌
   (주의점: javax.inject 패키지의 Provider)
   2. 로직을 사용(DL이 필요할 때마다) prototypeBeanProvider.get();를 추가
    그러면 내부에서는 스프링 컨테이너를 통해 해당 빈을 찾아서 반환해준다.(DL)

  -특징
   * get()을 호출시 스프링 컨테이너를 통해 해당 빈을 찾아서 반환(DL) -> 기능이 단순
   * 별도의 라이브러리가 필요
   * 자바 표준이므로 스프링이 아닌 다른 컨테이너에서도 사용할 수 있다.

>> 정리
그러면 프로토타입 빈을 언제 사용해야 할까? 매번 사용할 떄마다 의존관계 주입이 완료된 새로운 객체가 필요하면 사용
그러나 대부분 싱글톤 빈으로 대부분의 문제를 해결할 수 있기 때문에 프로토타입 빈을 직접적으로 사용하는 일은 매우 드물다.
ObjectProvider, JSR330 Provider 등은 프로토타입 뿐만 아니라 DL이 필요한 경우는 언제든지 사용할 수 있다.

자바 표준 기능 vs 스프링 제공 기능
 : 대부분의 경우 스프링에서 제공하는 기능을 사용하면 된다.( 더 다양하고 편리한 기능을 제공해주기 때문)
 하지만 다른 컨테이너에서도 사용해야할 경우 자바 표준 기능을 사용하면 된다.
 (JPA같은 경우는 대부분이 표준 방법을 사용한다.)

##############################################################
웹스코프
 : 웹 환경에서만 동작
   해당 스코프의 종료시점까지 관리 따라서 종료 메서드가 호출된다.

 - 종류
  * request: HTTP요청 하나가 들어오고 나갈 때 까지 유지되는 스코프, 각각의 HTTP 요청마다 별도의 인스턴스가 생성, 관리
  * session: HTTP Session과 동일한 생명주기를 가지는 스코프
  * application: 서블릿 컨텍스트('ServletContext')와 동일한 생명주기를 가지는 스코프
  * websocket: 웹 소켓과 동일한 생명주기를 가지는 스코프


Request 라이브러리
 - 'org.springframework.boot:spring-boot-starter-web'
   해당 라이브러리 추가시 스프링 부트는 내장 톰켓 서버를 활용해서 웹 서버와 스프링을 함께 실행시킨다.

 -웹 라이브러리가 없다면 AnnotationConfigApplicationContext 를 기반으로 애플리케이션을 구동.
  웹 라이브러리가 추가되면 웹 관 관련된 추가 설정과 환경들이 필요하므로
  AnnotationCofigServletWebServerApplicationContext를 기반으로 애플리케이션을 구동한다.
  (웹 관련 기능들이 추가되어 있음)

 -포트 변경 방법(기본포트 : 8080)
  main/resources/application.properties (설정, 없다면 만들어주자)
  'server.port=9090' (9090으로 포트를 변경하고 싶은 경우) 를 추가해주면 된다.

request스코프
 : 동시에 여러 HTTP요청이 오면 정확히 어떤 요청이 남긴 로그인지 구분하기 어렵다.
 이를 해결하기 위해서 request 스코프를 사용해보자.

 - 기대하는 공통 포멧: [UUID][requestURL]{message}
 - UUID를 사용해서 HTTP요청을 구분해보자.
 requestURL정보도 추가로 넣어서 어떤 URL을 요청해서 남은 로그인지 확인하자.

 1. 로그를 출력하기 위한 MyLogger 클래스 생성
 2. @Scope(value = "request")를 사용해서 request 스코프로 지정.
    따라서 빈은 HTTP요청당 하나씩 생성되고, HTTP요청이 끝나는 시점에 소멸.
 3. 이 빈이 생성되는 시점에 자동으로 @PostContruct 초기화 메서드를 사용해서 uuid를 생성해서 저장해둔다.
    이 빈은 HTTP요청 하나 당 하나씩 생성되므로, uuid를 저장해두면 다른 HTTP요청과 구분할 수 있다.
 4. 이 빈이 소멸되는 시점에 @PreDestroy를 사용해서 종료 메시지를 남긴다.
 5. requestURL은 이 빈이 생성되는 시점에는 알 수 없으므로, 외부에서 setter로 입력 받는다.


서비스 계층은 웹 기술에 종속되지 않고, 가급적 순수하게 유지하는 것이 유지보수 관점에서 좋다.
request scope의 MyLogger덕분에 이런 부분을 파라미터로 넘기지 않고,
MyLogger의 멤버 변수에 저장해서 코드와 계층을 깔끔하게 유지할 수 있다.

하지만 Request빈은 request요청이 들어왔을때 생성이 되는 빈이므로 처음에 생성하는 방법으로는 오류가 발생해서 웹을 띄울 수가 없다.
따라서 provider를 사용해서 DL(의존 탐색)을 이용해 의도적으로 관계주입을 Request가 들어올때로 늦춰주어야 한다.

##############################################################
프록시
  : MyLogger(타겟 클래스)의 가짜 프록시 클래스를 만들어두고
   HTTP request와 상관없이 가짜 프록시 클래스를 다른 빈에 미리 주입해 둘 수 있다.

  - 사용방법: 프록시를 적용할 클래스에
   @Scope(proxyMode = ScopedProxyMode.TARGET_CLASS) 추가.
    * 적용 대상이 클래스인 경우: TARGET_CLASS
    * 적용 대상이 인터페이스인 경우: INTERFACES

 - 동작:
    1. CGLIB 라이브러리를 사용해 클래스를 가짜 프록시 개체를 만들어서 주입해준다.
      * @Scope의 proxyMode = ScopedProxyMode.TARGET_CLASS 를 설정하면 스프링 컨테이너는 CGLIB이라는
        바이트 코드를 조작하는 라이브러리를 사용해서, MyLogger를 상속받은 가짜 프록시 객체를 생성.
      * 클래스를 확인해보면 우리가 등록한 MyLogger클래스가 아닌 MyLogger$$EnhancerBySpringCGLIB 이라는 클래스임을 알수있음.
      * 스프링 컨테이너에 myLogger라는 이름으로 진짜 클래스 대신 프록시객체를 등록한다.
      * 따라서 ac.getBean("myLogger", MyLogger.class)로 조회해도 프록시 객체가 조회되는 것을 확인할 수 있다.
      * 그러므로 의존관계 주입(DI)도 가짜 프록시 객체가 주입 된다.

    2. 가짜 프록시 객체는 요청이 오면 그때 내부에서 진짜 빈을 요청하는 위임 로직이 들어있다.
      * 가짜 프록시 빈은 내부에 실제 MyLogger를 찾는 방법을 가지고 있다.
      * 클라이언트가 myLogger.logic()을 호출 하면 실제로는 가짜 프록시 객체의 메서드를 호출
      * 따라서 request스코프의 진짜 myLogger.logic()을 호출한다.
      * 가짜 프록시 객체는 원본 클래스를 상속 받아서 만들어졌기 떄문에 이 객체를 사용하는 클라이언트 입장에서는
        원본인지 아닌지 모르게, 동일하게 사용할 수 있다. (다형성)

    정리))
      * CGLIB라는 라이브러리로 내 클래스를 상속받은 가짜 프록시 객체를 만들어서 주입
      * 가짜 프록시 내부에는 실제 요청이오면 실제 빈을 요청하는 위임 로직이 들어있음.
      * 가짜 프록시 객체는 실제 request scope와는 관계가 없다. 그냥 가짜이며 단순한 위임로직만 있고 싱글톤 처럼 동작할 뿐이다.

 - 특징:
   * 프록시 객체 덕분에 클라이언트는 마치 싱글톤 빈을 사용하듯이 편리하게 request scope를 사용할 수 있따.
   * 사실 Provider를 사용하든, 프록시를 사용하든 핵심 아이디어는 진짜 객체 조회를 꼭 필요한 시점까지 지연처리 한다는 점이다.
   * 단지 애노테이션 설정 변경만으로 원본 객체를 프록시 객체로 대체할 수 있다.
   * 이것이 바로 다형성과 DI컨테이너가 가진 큰 강점.
   * 또한 웹 스코프가 아니여도 프록시는 사용할 수 있다.

 - 주의점:
   * 마치 싱글톤을 사용하는 것 같지만 다르게 동작하기 때문에 결국 주의해서 사용해야 한다.
   * 이런 특별한 scope는 꼭 필요한 곳에서만 최소화해서 사용하자, 무분별하게 사용하면 유지보수가 힘들어진다.

