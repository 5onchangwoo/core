의존관계 주입 방법
1. 생성자 주입
2. 수정자 주입
3. 필드 주입(setter 주입)
4. 일반 메서드 주입

1.생성자 주입
  - 이름 그대로 생성자를 통해서 의존 관계를 주입 받는 방법
  - 현재까지 우리가 진행했던 방법
  - 특징:
    * 생성자 호출 시점에 딱 1번만 호출되는 것이 보장.
    * "불변, 필수" 의존관계에 사용
  - 생성자가 1개가 있는 경우에는 @Autowired를 안해주어도 된다.
  (두개일 경우 원하는 생성자에 @Autowired 필수)

2. 수정자 주입(setter 주입)
  - setter라 불리는 필드의 값을 변경하는 수정자 메서드를 통해서 의존관계를 주입하는 방법
  - 특징:
    * "선택, 변경" 가능성이 있는 의존관계에서 사용
    다만 @Autowired의 기본 동작은 주입할 대상이 없으면 오류가 발생
    이를 해결하기 위해서는 @Autowired(rquired = false)를 추가해주면 된다.
    * 자바빈 프로퍼티 규약의 수정자 메서드 방식을 사용하는 방법
    필드는 private로 생성, 해당 필드,객체에 접근할때는 setXxx(), getXxx() 사용
    * 사용시 생성자가 필요없음.

3. 필드 주입
  - 필드에 바로 주입하는 방법
  - 특징:
    * 코드가 간결해서 많은 개발자들을 유혹하지만 외부에서 변경이 불가능해서
    테스트하기 힘들다는 치명적인 단점이 있다.
    * DI프레임워크가 없으면 아무것도 할 수 없다.
    * 그러므로 사용하지 않도록 한다.
      # 사용해도 되는 경우:
      # 애플리케이션의 실제 코드와 관계없는 테스트 코드
      # 스프링 설정을 목적으로 하는 @Configuration같은 곳에서만 특별한 용도로 사용

4. 일반 메서드 주입
  - 일반 메서드를 통해서 주입 받을 수 있다.
  - 특징:
    * 한번에 여러 필드를 주입 받을 수 있다.
    * 일반적으로 잘 사용하지 않음.
    * 수정자 주입이랑 비슷하다.

- 참고: 의존관계 자동 주입은 스프링 컨테이너가 관리하는 스프링 빈이어야 한다.
스프링 빈이 아닌 Meber 같은 클래스에서 @Autowired 코드를 적용해도 아무 동작X

5. 옵션 처리
  - 주입할 스프링 빈이 없어도 동작해야 할 때가 있다.
  그런데 @Autowired만 사용하면 required옵션의 기본 값이 true로 되어있음.
  따라서 주입 대상이 없으면 오류가 발생.

  - 자동 주입 대상을 옵션으로 처리하는 방법은 다음과 같다.
    1) @Autowired(required = false)
      : 자동 주입할 대상이 없으면 수정자 메서드 자체가 호출이 안됨.
    2) org.springframework.lang.@Nullable
      : 자동 주입할 대상이 없으면 "null"이 입력된다.
    3) Optional<>
      : 자동 주입할 대상이 없으면 "Optional.empty"가 입력

6. 생성자 주입방법을 선택해야 하는 이유
  - 과거에는 수정자 주입, 필드 주입을 많이 사용했지만,
  최근에는 스프링을 포함한 DI프레임워크 대부분이 생성자 주입을 권장함.
  -이유:
   1]불변
    1) 대부분의 의존관계 주입은 한번 일어나면 애플리케이션 종료시점까지
    의존관계를 변경할 일이 없다. 오히려 대부분의 의존관계는 애플리케이션
    종료 전까지 변하면 안된다.(불변해야하 한다.)
    2) 수정자 주입을 사용하면, setXxx()메서드를 public으로 열어두어야 한다.
    3) 누군가 실수로 변경할 수도 있고, 변경하면 안되는 메서드를 열어두는 것은
    좋은 설계 방법이 아니다.
    4) 생성자 주입은 객체를 생성할 때 딱 1번만 호출되므로 이후에 호출되는 일이 없다.
    따라서 불변하게 설계할 수 있다.

   2]누락
    프레임 워크 없이 순수한 자바 코드를 단위 테스트 하는 경우에
    수정자 의존관계인 경우
   3]final키워드
    생성자 주입을 사용하면 필드에 final 키워드를 사용할 수 있다.
    그래서 생성자에서 혹시라도 값이 설정되지 않는 오류를 컴파일 시점에 막아줌.
    (참고 : 수정자 주입을 포함한 나머지 주입방식은 모두 생성자 이후에 호출,
    따라서 final키워드를 사용할 수 없다.)
  -정리
    * 생성자 주입 방식을 선택하는 이유는 여러가지가 있지만,
    프레임워크에 의존하지 않고, 순수한 자바 언어의 특징을 잘 살리는 방법이다.
    * 기본으로 생성자 주입을 사용하고, 필수 값이 아닌 경우에는
    수정자 주입 방식을 옵션으로 부여하면 된다.
    생성자 방식과 수정자 방식을 동시에 사용할 수 있다.
    * 필드 주입은 사용하지 않는 것이 좋다.

7. 롬복과 최신 트렌드
  -롬복 설치
  1) build.gradle에 아래 코드 추가
  ---------------------------------
  //lombok 설정 추가 시작
  configurations {
  	compileOnly {
  		extendsFrom annotationProcessor
  	}
  }
  //lombok 설정 추가 끝
  ---------------------------------

  2) build.gradle파일의 dependencies에 아래코드 추가
  ---------------------------------
  //lombok 라이브러리 추가 시작
  	compileOnly('org.projectlombok:lombok')
  	annotationProcessor('org.projectlombok:lombok')

  	testCompileOnly('org.projectlombok:lombok')
  	testAnnotationProcessor('org.projectlombok:lombok')
  	//lombok 라이브러리 추가 끝
  ---------------------------------

  3) 설정창에 어노테이션 프로세서(annotaion Processor) 활성화

  -기능:
    * @Setter, @Getter 등 어노테이션 추가시 자동으로 생성해줌.
    * @RequiredArgsConstructor 사용시 생성자를 자동으로 생성해줌.
    이 기능을 이용해 생성자를 자동으로 만들고
    여기에 생성자가 1개일때 @Autowired를 생략해도 되는 것을 이용해
    쉽고 간단하게

8. 조회 빈이 2개 이상인 경우
  1) @Autowired 필드 명 매칭
    * @Autowired는 타입 매칭을 시도하고, 이때 여러 빈이 있으면 필드 이름, 파라미터 이름으로 빈 이름을 추가 매칭한다.
    * 필드 명 매칭은 먼저 타입 매칭을 시도 하고 그 결과에 여러 빈이 있을 때 추가로 동작하는 기능

  2) @Qualifier
    * 추가 구분자를 붙여주는 방법.
    * 주입 시 추가적인 방법을 제공하는 것이지 이름을 변경하는 것은 아니다.

  3) @Primary
    * 우선 순위를 정하는 방법. 여러개 조회시 우선권을 갖는다

  참고) @Qualifier ,@Primary두개 동시 사용시
    : @Qualifier가 우선순위를 갖게 됨.
