회원
1. 회원을 가입하고 조회
2. 회원은 일반, VIP 두 가지 등급
3. 회원 데이터는 자체 DB를 구축할 수도 외부 시스템과 연동할 수 있다.(미확정)

주문과 할인 정책
1. 회원은 상품 주문 가능
2. 회원 등급에 따라 할인 정책 적용
3. 모든 VIP는 1,000원을 할인해주는 고정 금액 할인(나중에 변경될 수 있음)
4. 할인 정책은 변경 가능성이 높다. 회사의 기본 할인 정책을 아직 정하지 못했고,
오픈 직전까지 고민을 미루고 싶다. 최악의 경우에는 할인을 적용하지 않을 수도 있다.(미확정)

회원데이터, 할인 정책 같은 부분은 지금 결정하기 어려운 부분.
하지만 이런 정책이 결정될 때 까지 개발을 무기한 기다릴 수도 없다.

그러므로 인터페이스를 만들고 구현체를 언제든지 갈아끼울 수 있도록 설계하자.


설계>>
--회원 도메인 협력 관계
클라이언트 --> 회원 서비스(회원가입, 회원조회) --> 회원 저장소(메모리, DB, 외부시스템 연동)

*회원 클래스 다이어그램
MemberServiceImpl -->MemberService(interface)
    └──>MemberRepository(interface) ---> "MemoryMemberRepository" or "DbMemberRepository"

//회원 서비스 : MemberServiceImpl

*회원 객체 다이어그램
클라이언트 ─> 회원서비스 ─> 메모리 회원 저장소

---------------------------------------------
--주문 도메인 협력, 역할, 책임
1.주문 생성(클라이언트 -> 주문 서비스 역할)
- 회원ID
- 상품명
- 상품 가격
2.회원 조회(주문 서비스 역할 -> 회원 저장소 역할)
3.할인 적용(주문 서비스 역할 -> 할인 정책 역할)
4.주문 결과 반환(주문 서비스 역할 -> 클라이언트)
그 후 역할에 해당하는 구현체를 구현.
****

---------------------------------------------
새로운 할인 정책 개발
할인 정책을 1000원 고정 할인에서 10%할인 정책으로 변경하려고 한다.
-> AppConfig설계

총 3가지 적용
1.SIP(단일 책임 원칙)
: AppConfig 등장 전에는 클라이언트 객체는 직접 구현 객체를 생성, 실행하는 다양한 책임
-> 관심사를 분리하면서 구현객체를 생성, 연결 : AppConfig
-> 클라이언트 객체는 실행하는 책임만 담당하게 됨.

2.DIP(의존관계 역전 원칙)
: 새로운 할인 정책을 개밣고, 적용하려고 하니 클라이언트 코드도 변경해야 했음.
왜냐하면 기존 클라이언트 코드(OrderServiceImpl)는 DIP를 지키며
DiscountPolicy추상화 인터페이스에 의존하는 것 같았지만,
FixDiscountPolicy구체화 구현 클래스에도 함께 의존
-> 클라이언트 코드가 DisCountPolicy 추상화 인터페이스에만 의존하도록 코드를 변경
-> 하지만 클라이언트 코드는 인터페이스만으로는 아무것도 실행 불가능.(NullPointException 발생)
-> 해결 하기위해 AppConfig에서 FixDiscount객체 인스턴스를 클라이언트 코드 대신 생성
-> 문제를 해결하며 의존 관계 주입(DIP)도 따름

3.OCP(개방-폐쇄 원칙)
: 다형성 사용, 클라이언트DIP지킴
- 애플리케이션을 사용영역과 구성영역으로 나눔
- AppConfig가 의존관계를 FixDiscountPolicy -> RateDiscountPolicy로 변경해도 클라이언트 코드는 변경 x
-> 새롭게 확장해도 사용영역의 변경은 닫혀있음