제어의 역전(IoC : Inversion of Control)
: 일반적인 프로그램은 구현객체가 프로그램의 제어 흐름을 스스로 조종했음
하지만 AppConfig가 등장한 이후 구현 객체는 자신의 로직을 실행하는 역할만 담당.
AppConfig가 프로그램 제어 흐름을 담당하게 됨.
즉, 프로그램에서 제어흐름을 직접 제어하는 것이 아닌 외부에서 관리하는 것을 제어의 역전(IoC)이라 함.

프레임워크 vs 라이브러리
- 프레임워크가 내가 작성한 코드를 제어하고, 대신 실행 : 프레임워크
    ex(JUnit : 테스트할 로직만 짜면 알아서 자기만의 라이프사이클을 통해 테스트해줌)
- 내가 작성한 코드가 직접 제어의 흐름을 담당 : 라이브러리

의존관계 주입(DI : Dependency Injection)
- OrderServiceImpl은 DiscountPolicy 인터페이스에 의존. 실제 어떤 구현객체가 사용될지는 모름.
- 의존관계는 정적인 클래스 의존관계와 실행 시점에 결정되는 동적인 객체(인스턴스)의존관계를 분리
    -> 정적인 클래스 의존관계 :
        * 클래스가 사용하는 import코드만 보고 의존관계를 쉽게 판단 가능.
        * 정적인 의존관계는 애플리케이션을 실행하지 않아도 분석할 수 있다.
    -> 동적인 객체 인스턴스 의존관계 :
        * 애플리케이션 실행 시점에 실제 생성된 객체 인스턴스의 참조가 연결된 의존관계
        * 실행 시점(런타임)에 외부에서 실제 구현 객체를 생성하고 클라이언트에 전달해서
        클라이언트와 서버의 실제 의존관계가 연결되는 것을 '의존관계 주입'이라고 한다.
        * 의존관계 주입을 사용하면 클라이언트 코드를 변경하지 않고,
        클라이언트가 호출하는 대상의 타입 인스턴스를 변경
        * 의존관계 주입을 사용하면 정적인 클래스 의존관계를 변경하지 않고, 동적인 객체 인스턴스 의존관계 변경 가능

IoC컨테이너, DI컨테이너
- 객체를 새성하고 관리하면서 의존관계를 연결해 주는 것(ex: AppConfig)
- 의존관계 주입에 초점을 맞추어 최근에는 DI컨테이너라 한다.(혹은 어셈블러, 오브젝트 팩토리로도 불림)
